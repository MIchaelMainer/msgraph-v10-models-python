# -*- coding: utf-8 -*- 
'''
# Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
# 
#  This file was generated and any changes will be overwritten.
'''

from __future__ import unicode_literals
from ..model.windows_malware_severity import WindowsMalwareSeverity
from ..model.windows_malware_category import WindowsMalwareCategory
from ..model.windows_protection_state import WindowsProtectionState
from datetime import datetime
from ..one_drive_object_base import OneDriveObjectBase


class WindowsMalwareInformation(OneDriveObjectBase):

    def __init__(self, prop_dict={}):
        self._prop_dict = prop_dict

    @property
    def display_name(self):
        """
        Gets and sets the displayName
        
        Returns:
            str:
                The displayName
        """
        if "displayName" in self._prop_dict:
            return self._prop_dict["displayName"]
        else:
            return None

    @display_name.setter
    def display_name(self, val):
        self._prop_dict["displayName"] = val

    @property
    def additional_information_url(self):
        """
        Gets and sets the additionalInformationUrl
        
        Returns:
            str:
                The additionalInformationUrl
        """
        if "additionalInformationUrl" in self._prop_dict:
            return self._prop_dict["additionalInformationUrl"]
        else:
            return None

    @additional_information_url.setter
    def additional_information_url(self, val):
        self._prop_dict["additionalInformationUrl"] = val

    @property
    def severity(self):
        """
        Gets and sets the severity
        
        Returns: 
            :class:`WindowsMalwareSeverity<onedrivesdk.model.windows_malware_severity.WindowsMalwareSeverity>`:
                The severity
        """
        if "severity" in self._prop_dict:
            if isinstance(self._prop_dict["severity"], OneDriveObjectBase):
                return self._prop_dict["severity"]
            else :
                self._prop_dict["severity"] = WindowsMalwareSeverity(self._prop_dict["severity"])
                return self._prop_dict["severity"]

        return None

    @severity.setter
    def severity(self, val):
        self._prop_dict["severity"] = val

    @property
    def category(self):
        """
        Gets and sets the category
        
        Returns: 
            :class:`WindowsMalwareCategory<onedrivesdk.model.windows_malware_category.WindowsMalwareCategory>`:
                The category
        """
        if "category" in self._prop_dict:
            if isinstance(self._prop_dict["category"], OneDriveObjectBase):
                return self._prop_dict["category"]
            else :
                self._prop_dict["category"] = WindowsMalwareCategory(self._prop_dict["category"])
                return self._prop_dict["category"]

        return None

    @category.setter
    def category(self, val):
        self._prop_dict["category"] = val

    @property
    def last_detection_date_time(self):
        """
        Gets and sets the lastDetectionDateTime
        
        Returns:
            datetime:
                The lastDetectionDateTime
        """
        if "lastDetectionDateTime" in self._prop_dict:
            return datetime.strptime(self._prop_dict["lastDetectionDateTime"].replace("Z", ""), "%Y-%m-%dT%H:%M:%S.%f")
        else:
            return None

    @last_detection_date_time.setter
    def last_detection_date_time(self, val):
        self._prop_dict["lastDetectionDateTime"] = val.isoformat()+"Z"

    @property
    def windows_devices_protection_state(self):
        """Gets and sets the windowsDevicesProtectionState
        
        Returns: 
            :class:`WindowsDevicesProtectionStateCollectionPage<onedrivesdk.request.windows_devices_protection_state_collection.WindowsDevicesProtectionStateCollectionPage>`:
                The windowsDevicesProtectionState
        """
        if "windowsDevicesProtectionState" in self._prop_dict:
            return WindowsDevicesProtectionStateCollectionPage(self._prop_dict["windowsDevicesProtectionState"])
        else:
            return None

