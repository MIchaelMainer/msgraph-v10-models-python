# -*- coding: utf-8 -*- 
'''
# Copyright (c) Microsoft Corporation.  All Rights Reserved.  Licensed under the MIT License.  See License in the project root for license information.
# 
#  This file was generated and any changes will be overwritten.
'''

from __future__ import unicode_literals
from ..model.windows_malware_severity import WindowsMalwareSeverity
from ..model.windows_malware_category import WindowsMalwareCategory
from ..model.windows_malware_execution_state import WindowsMalwareExecutionState
from ..model.windows_malware_state import WindowsMalwareState
from datetime import datetime
from ..one_drive_object_base import OneDriveObjectBase


class WindowsDeviceMalwareState(OneDriveObjectBase):

    def __init__(self, prop_dict={}):
        self._prop_dict = prop_dict

    @property
    def display_name(self):
        """
        Gets and sets the displayName
        
        Returns:
            str:
                The displayName
        """
        if "displayName" in self._prop_dict:
            return self._prop_dict["displayName"]
        else:
            return None

    @display_name.setter
    def display_name(self, val):
        self._prop_dict["displayName"] = val

    @property
    def additional_information_url(self):
        """
        Gets and sets the additionalInformationUrl
        
        Returns:
            str:
                The additionalInformationUrl
        """
        if "additionalInformationUrl" in self._prop_dict:
            return self._prop_dict["additionalInformationUrl"]
        else:
            return None

    @additional_information_url.setter
    def additional_information_url(self, val):
        self._prop_dict["additionalInformationUrl"] = val

    @property
    def severity(self):
        """
        Gets and sets the severity
        
        Returns: 
            :class:`WindowsMalwareSeverity<onedrivesdk.model.windows_malware_severity.WindowsMalwareSeverity>`:
                The severity
        """
        if "severity" in self._prop_dict:
            if isinstance(self._prop_dict["severity"], OneDriveObjectBase):
                return self._prop_dict["severity"]
            else :
                self._prop_dict["severity"] = WindowsMalwareSeverity(self._prop_dict["severity"])
                return self._prop_dict["severity"]

        return None

    @severity.setter
    def severity(self, val):
        self._prop_dict["severity"] = val

    @property
    def catetgory(self):
        """
        Gets and sets the catetgory
        
        Returns: 
            :class:`WindowsMalwareCategory<onedrivesdk.model.windows_malware_category.WindowsMalwareCategory>`:
                The catetgory
        """
        if "catetgory" in self._prop_dict:
            if isinstance(self._prop_dict["catetgory"], OneDriveObjectBase):
                return self._prop_dict["catetgory"]
            else :
                self._prop_dict["catetgory"] = WindowsMalwareCategory(self._prop_dict["catetgory"])
                return self._prop_dict["catetgory"]

        return None

    @catetgory.setter
    def catetgory(self, val):
        self._prop_dict["catetgory"] = val

    @property
    def execution_state(self):
        """
        Gets and sets the executionState
        
        Returns: 
            :class:`WindowsMalwareExecutionState<onedrivesdk.model.windows_malware_execution_state.WindowsMalwareExecutionState>`:
                The executionState
        """
        if "executionState" in self._prop_dict:
            if isinstance(self._prop_dict["executionState"], OneDriveObjectBase):
                return self._prop_dict["executionState"]
            else :
                self._prop_dict["executionState"] = WindowsMalwareExecutionState(self._prop_dict["executionState"])
                return self._prop_dict["executionState"]

        return None

    @execution_state.setter
    def execution_state(self, val):
        self._prop_dict["executionState"] = val

    @property
    def state(self):
        """
        Gets and sets the state
        
        Returns: 
            :class:`WindowsMalwareState<onedrivesdk.model.windows_malware_state.WindowsMalwareState>`:
                The state
        """
        if "state" in self._prop_dict:
            if isinstance(self._prop_dict["state"], OneDriveObjectBase):
                return self._prop_dict["state"]
            else :
                self._prop_dict["state"] = WindowsMalwareState(self._prop_dict["state"])
                return self._prop_dict["state"]

        return None

    @state.setter
    def state(self, val):
        self._prop_dict["state"] = val

    @property
    def initial_detection_date_time(self):
        """
        Gets and sets the initialDetectionDateTime
        
        Returns:
            datetime:
                The initialDetectionDateTime
        """
        if "initialDetectionDateTime" in self._prop_dict:
            return datetime.strptime(self._prop_dict["initialDetectionDateTime"].replace("Z", ""), "%Y-%m-%dT%H:%M:%S.%f")
        else:
            return None

    @initial_detection_date_time.setter
    def initial_detection_date_time(self, val):
        self._prop_dict["initialDetectionDateTime"] = val.isoformat()+"Z"

    @property
    def last_state_change_date_time(self):
        """
        Gets and sets the lastStateChangeDateTime
        
        Returns:
            datetime:
                The lastStateChangeDateTime
        """
        if "lastStateChangeDateTime" in self._prop_dict:
            return datetime.strptime(self._prop_dict["lastStateChangeDateTime"].replace("Z", ""), "%Y-%m-%dT%H:%M:%S.%f")
        else:
            return None

    @last_state_change_date_time.setter
    def last_state_change_date_time(self, val):
        self._prop_dict["lastStateChangeDateTime"] = val.isoformat()+"Z"

    @property
    def detection_count(self):
        """
        Gets and sets the detectionCount
        
        Returns:
            int:
                The detectionCount
        """
        if "detectionCount" in self._prop_dict:
            return self._prop_dict["detectionCount"]
        else:
            return None

    @detection_count.setter
    def detection_count(self, val):
        self._prop_dict["detectionCount"] = val

